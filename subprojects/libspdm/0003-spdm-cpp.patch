From 9b55e9ad63f552889bb66a2220d73e820f26ceb7 Mon Sep 17 00:00:00 2001
From: Eddyhan <eddyhan@ami.com>
Date: Mon, 19 Sep 2022 15:49:52 +0800
Subject: [PATCH] spdm cpp.


diff --git a/include/hal/base.h b/include/hal/base.h
index ce295f23..904e00c2 100644
--- a/include/hal/base.h
+++ b/include/hal/base.h
@@ -627,7 +627,7 @@ typedef uintn *BASE_LIST;
 
 /* Verify that processor_bind.h produced data Types*/
 
-
+#ifndef __cplusplus
 STATIC_ASSERT(
     sizeof(bool) == 1,
     "sizeof (bool) does not meet data Type requirements");
@@ -658,7 +658,7 @@ STATIC_ASSERT(
 STATIC_ASSERT(
     sizeof(char) == 1,
     "sizeof (char) does not meet data Type requirements");
-
+#endif
 
 /* The following three enum types are used to verify that the compiler
  * configuration for enum types. These enum types and enum values are not
@@ -670,7 +670,7 @@ typedef enum { __VerifyUint8EnumValue = 0xff } __VERIFY_UINT8_ENUM_SIZE;
 typedef enum { __VerifyUint16EnumValue = 0xffff } __VERIFY_UINT16_ENUM_SIZE;
 
 typedef enum { __VerifyUint32EnumValue = 0xffffffff } __VERIFY_UINT32_ENUM_SIZE;
-
+#ifndef __cplusplus
 STATIC_ASSERT(
     sizeof(__VERIFY_UINT8_ENUM_SIZE) == 4,
     "size of enum does not meet data Type requirements");
@@ -680,7 +680,7 @@ STATIC_ASSERT(
 STATIC_ASSERT(
     sizeof(__VERIFY_UINT32_ENUM_SIZE) == 4,
     "size of enum does not meet data Type requirements");
-
+#endif
 /**
  * Macro that returns a pointer to the data structure that contains a specified field of
  * that data structure.  This is a lightweight method to hide information by placing a
diff --git a/include/hal/library/cryptlib.h b/include/hal/library/cryptlib.h
index 8d4a3521..ca9bb811 100644
--- a/include/hal/library/cryptlib.h
+++ b/include/hal/library/cryptlib.h
@@ -3512,8 +3512,13 @@ void ecx_free(const void *ecx_context);
  * @retval false  public_size is not large enough.
  *
  **/
+#ifndef __cplusplus  
 bool ecx_generate_key(void *ecx_context, uint8_t *public,
                       uintn *public_size);
+#else
+bool ecx_generate_key(void *ecx_context, uint8_t *Public,
+                      uintn *publicSize);
+#endif                      
 
 /**
  * Computes exchanged common key.
@@ -3646,9 +3651,13 @@ bool sm2_dsa_check_key(const void *sm2_context);
  * @retval false  public_size is not large enough.
  *
  **/
+#ifndef __cplusplus  
 bool sm2_dsa_generate_key(void *sm2_context, uint8_t *public,
                           uintn *public_size);
-
+#else
+bool sm2_dsa_generate_key(void *sm2_context, uint8_t *Public,
+                          uintn *publicSize);
+#endif
 /**
  * Allocates and Initializes one Shang-Mi2 context for subsequent use.
  *
@@ -3718,9 +3727,13 @@ bool sm2_key_exchange_init(const void *sm2_context, uintn hash_nid,
  * @retval false  public_size is not large enough.
  *
  **/
+#ifndef __cplusplus  
 bool sm2_key_exchange_generate_key(void *sm2_context, uint8_t *public,
                                    uintn *public_size);
-
+#else
+bool sm2_key_exchange_generate_key(void *sm2_context, uint8_t *Public,
+                                   uintn *publicSize);
+#endif
 /**
  * Computes exchanged common key, based upon GB/T 32918.3-2016: SM2 - Part3.
  *
diff --git a/include/hal/library/memlib.h b/include/hal/library/memlib.h
index 5152fe9c..5b7a2002 100644
--- a/include/hal/library/memlib.h
+++ b/include/hal/library/memlib.h
@@ -51,9 +51,13 @@
  * @return   0 on success. non-zero on error.
  *
  **/
+#ifndef __cplusplus 
 int copy_mem_s(void *restrict dst_buf, uintn dst_len,
                const void *restrict src_buf, uintn src_len);
-
+#else
+int copy_mem_s(void * dstBuf, uintn dstLen,
+               const void * srcBuf, uintn srcLen);
+#endif
 void* copy_mem(void* dst_buf, const void* src_buf, uintn len);
 
 /**
-- 
2.34.1

